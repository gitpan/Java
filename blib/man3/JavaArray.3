.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH JavaArray 3 "perl 5.005, patch 03" "12/Mar/2001" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
JavaArray \- Tie'd extension for Java arrays from Java.pm
.SH "SYNOPSIS"
.PP
.Vb 1
\&  use Java;
.Ve
.Vb 3
\&  # Set up Java.pm to always return tied array references to me
\&  my $java = new Java(use_tied_arrays => 1);
\&  my $tied_array = $java->create_array("java.lang.String",5);
.Ve
.Vb 1
\&        OR
.Ve
.Vb 5
\& # Roll my own tied arrays
\&        my @tied_array;
\&        tie @tied_array, 'JavaArray', $java->create_array("java.lang.String",5);
\&                OR
\&        tie @tied_array, 'JavaArray', $some_object_that_is_an_array;
.Ve
.Vb 2
\&  // Set array element 3 to "Java is lame"
\&  $tied_array[3] = "Java is lame";
.Ve
.Vb 6
\&  // Get array element 3's value
\&  my $element = $tied_array[3]->get_value();
\&  
\&  // Get length
\&  my $length = scalar(@tied_array);
\&  my $size = $#tied_array;
.Ve
.Vb 2
\&  // Use as parameter you gotta pass the reference!
\&  my $list = $java->java_util_Arrays("asList",\e@tied_array);
.Ve
.Vb 4
\&  // NO OTHER ARRAY OPERATIONS ARE AVAILABLE!
\&  //    so no pop or push or unshift or shift or splice
\&  //    Hey event this can't make Java arrays cool!
\&  //    use the Collections framework!
.Ve
.SH "DESCRIPTION"
This module puts a pretty thin veneer over Java.pm objects are are Java
arrays.  Makes \*(L'em slightly prettier to play with.
You can pass as an agrument to the \*(L'tie\*(R' any Java object that is an array \-
either one you created yourself or one that was returned to you by
something else.
.PP
You probably should NOT be using this directly, but specify \*(L'use_tied_arrays\*(R'
in your constructor args to Java.pm.
.Sh "In parameter lists"
If you want to use your array in a parameter list you've got to pass in
the \s-1REFERENCE\s0 to your array or things will go haywire...
If you specified \*(L'use_tied_arrays\*(R' in your Java.pm constructor then you
will only receive references back from Java.pm so you've already got the
reference.  \s-1ONLY\s0 if you call \*(L'tie\*(R' yourself (& I can't really think of why
you ever would... \s-1BUT\s0) & get the array itself do you need to take its
reference when using it in parameter lists.
.Sh "Automatic usage"
You can tell Java.pm to automatically convert all Java arrays to their
tied counterparts by setting \*(L'use_tied_arrays\*(R' in your Java constructor.
You will get receive a reference to the tied array so you must use the \*(L'\->\*(R'
notation like:
.PP
.Vb 2
\&        $array->[3] = "Mark rox";
\&        my $ele = $array->[4];
.Ve
See perldoc Java.pm for more info.  You can then use that value directly
in parameter lists.
.Sh "\s-1EXPORT\s0"
None by default.
.SH "AUTHOR"
Mark Ethan Trostler, mark@zzo.com
.SH "SEE ALSO"
\fIperl\fR\|(1).
Java.pm.

.rn }` ''
.IX Title "JavaArray 3"
.IX Name "JavaArray - Tie'd extension for Java arrays from Java.pm"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "In parameter lists"

.IX Subsection "Automatic usage"

.IX Subsection "\s-1EXPORT\s0"

.IX Header "AUTHOR"

.IX Header "SEE ALSO"

